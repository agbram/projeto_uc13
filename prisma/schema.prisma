// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Cart {
  id Int @id @default(autoincrement())

  productQuantity @map("product_quantity")

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  stockId Int @map("stock_id")
  stocks Stock @relation(fields:[stockId], references:[id])

  orderId @map("order_id")
  orders Order @relation(fields:[orderId], references:[id])

  @@map("carts")
}

model Payment {
  id Int @id @default(autoincrement())
  pix String
  credit_card String
  status Boolean
  value Int
  user String
  date DateTime
  order_detail String
   

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  orders Order[]
  @@map("payment")
}

model User {
  id Int @id @default(autoincrement())
  pass String
  email String
  name String
  birth DateTime
  creditCard String @map("credit_card")
  address String
  phone String
  permission String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  orders Order[]
  @@map("users")

}

model Order {

  id Int @id @default(autoincrement())

  //preencher com informações

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  userId Int @map("user_id")
  users User @relation(fields:[userId], references: [id])

  

  paymentId Int  @map("payment_id")
  payments Payment @relation(fields[paymentId], references: [id])


  @@map("orders")
}

model Adm {
  id Int @id @default(autoincrement()) 

  permission 

  
}

model Rules {
  id Int @id @default(autoincrement())  
  stockControl Boolean @map("stock_control")
  lowStockAlert Boolean @map("low_stock_alert")
  registerProduct Boolean @map("register_product")
  disableProduct Boolean @map("disable_product")
  editStock Boolean @map("edit_stock")
  usersRegistered Boolean @map("users_registered")
  stockList Boolean @map("stock_list")
  editUser Boolean @map("edit_user")
  dashboardInvoicing Boolean @map("dashboard_invoicing")
  recipes Boolean 
  pricing Boolean
  
  newOffer Boolean @map("new_offer")
  shopCart Boolean @map("shop_cart")
  myPurchases Boolean @map("my_purchases")
  profile Boolean
  sumStock Boolean @map("sum_stock")
  disableUser Boolean @map("disable_user")
  purchasingReport Boolean @map("purchasing_report")
  userList Boolean @map("user_list")
  userStatus Boolean @map("user_status")
  productStatus Boolean @map("product_status")

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
}

model Purchases {
  //Tabela relatório pós compra

  id Int @id @default(autoincrement())

  purchaseClientName String @map("purchase_client_name")
  purchaseClientAddress String @map("purchase_client_address")
  purchasedProducts String @map("purchased_products")
  purchasePaymentForm String @map("purchase_payment_form")
  purchasedQuantity Int @map("purchased_quantity")
  purchasePrice Float @map("purchase_price") 

  isFinished Boolean @map("is_finished")
  isShipped Boolean @map("is_shipped")

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
}

model Stock {
  id Int @id @default(autoincrement())  
  productName String @map("product_name")
  productType String @map("product_type")
  productPrice Float @map("product_price")

  isInStock Boolean @map("is_in_stock")
  amountInStock Int @map("amount_in_stock")

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  Carts Cart[]
  @@map("stocks")
}



